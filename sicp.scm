(define true #t)
(define false #f)
(define inc (lambda (x) (+ x 1)))
(define (square x) (* x x))
(define (cube x) (* x x x))
(define (max a b)
  (cond ((> a b) a)
        (else b)))
(define (min a b)
  (cond ((> a b) b)
        (else a)))
(define (average x y)
  (/ (+ x y) 2))
(define (sum li)
  (accumulate + 0 li))
(define (smallest-divisor n)
  (find-divisor  n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))




(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
	  (accumulate op initial (cdr sequence)))))
(define (enumerate-interval low high)
  (if (> low high)
      '()
      (cons low (enumerate-interval (+ low 1) high))))