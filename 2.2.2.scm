;;;;;2.2.2
(define (count-leaves x)
  (cond ((null? x) 0)
	((not (pair? x)) 1)
	(else
	 (+ (count-leaves (car x))
	    (count-leaves (cdr x))))))
;(define x (cons (list 1 2) (list 3 4)))
;;;2.26
;(define x (list 1 2 3))
;(define y (list 4 5 6))
;;;2.27
;(define x (list (list 1 2) (list 3 4)))
(define x (list (list 1 2) (list 3 4) (list 5 6)))
(define (deep-reverse list)
  (define (iter remained result)
    (if (null? remained)
	result
	(if (not (pair? (car remained)))
	    (iter (cdr remained)
		  (cons (car remained) result))
	    (iter (cdr remained)
		  (cons (iter (car remained) '() )
			result)))))
  (iter list '()))
;;;;;2.28
(define (frigne items)
  (define (iter things result)
    (cond ((null? things) result)
	  ((not (pair? things)) (append result (list things)))
	  (else
	   (iter (cdr things) (iter (car things) result)))))
  (iter items '()))
;; (define (fringe tree)
;;   (define (empty-tree? tree) (null? tree))
;;   (define (leaf? tree) (not (pair? tree)))
;;   (define (left-branch tree) (car tree))
;;   (define (right-branch tree) (cdr tree))
;;   (cond ((empyt-tree? tree)
;; 	 '())
;; 	((leaf? tree)
;; 	 (list tree))
;; 	(else
;; 	 (append (fringe (left-branch tree))
;; 		 (fringe (right-branch tree))))))

;;;2.29
(define (make-mobile left right)
  (list left right))
(define (make-branch length structure)
  (list length structure))
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (cadr mobile))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (cadr branch))
(define (total-weight mobile)
  (define (branch-weight branch)
    (if (hangs-another-mobile? branch)
	(total-weight (branch-structure branch))
	(branch-structure branch)))
  (define (hangs-another-mobile? branch)
    (pair? (branch-structure branch)))
  (+ (branch-weight (left-branch mobile))
     (branch-weight (right-branch mobile))))
;;;;;
(define (scale-tree tree factor)
  (map (lambda (sub-tree)
	 (if (pair? sub-tree)
	     (scale-tree sub-tree factor)
	     (* sub-tree factor)))
       tree))
;;;2.30
(define (square-tree tree)
  (map (lambda (sub-tree)
	 (if (pair? sub-tree)
	     (square-tree sub-tree)
	     (square sub-tree)))
       tree))
;;;;2.31
(define (tree-map f tree)
  (map (lambda (sub-tree)
	 (if (pair? sub-tree)
	     (tree-map f sub-tree)
	     (f sub-tree)))
       tree))
;;;;;2.32
(define  (subsets s)
  (if (null? s)
      (list '())
      (let ((rest (subsets (cdr s))))
	(append  rest (map (lambda (x)
			     (cons (car s) x))
			   rest)))))
