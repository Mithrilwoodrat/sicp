#lang planet neil/sicp
;;;;1.1
(define (square x)
  (* x x))
(define (max a b)
  (cond ((> a b) a)
        (else b)))
(define (min a b)
  (cond ((> a b) b)
        (else a)))
(define(f a b c)
  (+ (max a b)
     (max (min a b) c)))
(define(p) (p))
(define(test x y)
  (if (= x 0)
      0
      y))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (sqrt x)
(define (sqrt-iter guess x)
 (if (good-enough? guess (improve guess x))
      (improve guess x)
      (sqrt-iter (improve guess x)
                 x)))
(define (improve guess x)
  (average guess (/ x guess)))
(define (average x y)
  (/ (+ x y) 2))
(define (good-enough? old-guess new-guess);;不再检测猜测值 guess 的平方与 x 之间的差,而是检测新旧两次猜测值之间的比率
  (> 0.001 (/ (abs (- new-guess old-guess)) old-guess)))
  (sqrt-iter 1.0 x))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
;(if #t (display "good") (display "bad"))
;(new-if #t (display "good") (display "bad"))
;;ex1.8
(define (cube x)
  (* x x x))
(define (cube-root-iter guess x)
  (if (good-enough guess x)
  guess
  (cube-root-iter (improved guess x)
                  x)))
(define (improved guess x)
  (/ (+ (/ x (square guess))
     (* 2 guess))
     3))
(define (good-enough guess x)              ; 要用 cube 来检测是否足够好
    (< (abs (- (cube guess) x))
       0.001))
(define (cube-root x)
  (cube-root-iter 1.0 x))
;;;;;;;;;; 1.1.8
(define (sqrt2 x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (define (average x y)
      (/ (+ x y) 2.0))
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))